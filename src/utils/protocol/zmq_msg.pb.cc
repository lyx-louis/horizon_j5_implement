// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zmq_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "zmq_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ZMQMessage {

namespace {

const ::google::protobuf::Descriptor* ImageMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ImageMsg_DataType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ZMQMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZMQMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ZMQMsg_MsgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ImageFormat_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_zmq_5fmsg_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_zmq_5fmsg_2eproto() {
  protobuf_AddDesc_zmq_5fmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "zmq_msg.proto");
  GOOGLE_CHECK(file != NULL);
  ImageMsg_descriptor_ = file->message_type(0);
  static const int ImageMsg_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMsg, image_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMsg, image_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMsg, image_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMsg, image_dst_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMsg, image_dst_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMsg, image_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMsg, data_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMsg, image_name_),
  };
  ImageMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImageMsg_descriptor_,
      ImageMsg::default_instance_,
      ImageMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(ImageMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMsg, _is_default_instance_));
  ImageMsg_DataType_descriptor_ = ImageMsg_descriptor_->enum_type(0);
  ZMQMsg_descriptor_ = file->message_type(1);
  static const int ZMQMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQMsg, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQMsg, img_msg_),
  };
  ZMQMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ZMQMsg_descriptor_,
      ZMQMsg::default_instance_,
      ZMQMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(ZMQMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQMsg, _is_default_instance_));
  ZMQMsg_MsgType_descriptor_ = ZMQMsg_descriptor_->enum_type(0);
  ImageFormat_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_zmq_5fmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImageMsg_descriptor_, &ImageMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ZMQMsg_descriptor_, &ZMQMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_zmq_5fmsg_2eproto() {
  delete ImageMsg::default_instance_;
  delete ImageMsg_reflection_;
  delete ZMQMsg::default_instance_;
  delete ZMQMsg_reflection_;
}

void protobuf_AddDesc_zmq_5fmsg_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_zmq_5fmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rzmq_msg.proto\022\nZMQMessage\"\240\002\n\010ImageMsg"
    "\022\022\n\nimage_data\030\001 \001(\014\022\023\n\013image_width\030\002 \001("
    "\005\022\024\n\014image_height\030\003 \001(\005\022\027\n\017image_dst_wid"
    "th\030\004 \001(\005\022\030\n\020image_dst_height\030\005 \001(\005\022-\n\014im"
    "age_format\030\006 \001(\0162\027.ZMQMessage.ImageForma"
    "t\0220\n\tdata_type\030\007 \001(\0162\035.ZMQMessage.ImageM"
    "sg.DataType\022\022\n\nimage_name\030\010 \001(\t\"-\n\010DataT"
    "ype\022\t\n\005UINT8\020\000\022\t\n\005INT32\020\001\022\013\n\007FLOAT32\020\002\"\207"
    "\001\n\006ZMQMsg\022,\n\010msg_type\030\001 \001(\0162\032.ZMQMessage"
    ".ZMQMsg.MsgType\022%\n\007img_msg\030\002 \001(\0132\024.ZMQMe"
    "ssage.ImageMsg\"(\n\007MsgType\022\r\n\tIMAGE_MSG\020\000"
    "\022\016\n\nFINISH_MSG\020\001*\303\001\n\013ImageFormat\022\t\n\005IMG_"
    "Y\020\000\022\014\n\010IMG_NV12\020\001\022\016\n\nIMG_YUV444\020\002\022\013\n\007IMG"
    "_BGR\020\003\022\014\n\010IMG_BGRP\020\004\022\013\n\007IMG_RGB\020\005\022\014\n\010IMG"
    "_RGBP\020\006\022\r\n\tTENSOR_U8\020\007\022\r\n\tTENSOR_S8\020\010\022\016\n"
    "\nTENSOR_F32\020\t\022\016\n\nTENSOR_S32\020\n\022\016\n\nTENSOR_"
    "U32\020\013\022\007\n\003MAX\020\014b\006proto3", 662);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zmq_msg.proto", &protobuf_RegisterTypes);
  ImageMsg::default_instance_ = new ImageMsg();
  ZMQMsg::default_instance_ = new ZMQMsg();
  ImageMsg::default_instance_->InitAsDefaultInstance();
  ZMQMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_zmq_5fmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_zmq_5fmsg_2eproto {
  StaticDescriptorInitializer_zmq_5fmsg_2eproto() {
    protobuf_AddDesc_zmq_5fmsg_2eproto();
  }
} static_descriptor_initializer_zmq_5fmsg_2eproto_;
const ::google::protobuf::EnumDescriptor* ImageFormat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageFormat_descriptor_;
}
bool ImageFormat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ImageMsg_DataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageMsg_DataType_descriptor_;
}
bool ImageMsg_DataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ImageMsg_DataType ImageMsg::UINT8;
const ImageMsg_DataType ImageMsg::INT32;
const ImageMsg_DataType ImageMsg::FLOAT32;
const ImageMsg_DataType ImageMsg::DataType_MIN;
const ImageMsg_DataType ImageMsg::DataType_MAX;
const int ImageMsg::DataType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageMsg::kImageDataFieldNumber;
const int ImageMsg::kImageWidthFieldNumber;
const int ImageMsg::kImageHeightFieldNumber;
const int ImageMsg::kImageDstWidthFieldNumber;
const int ImageMsg::kImageDstHeightFieldNumber;
const int ImageMsg::kImageFormatFieldNumber;
const int ImageMsg::kDataTypeFieldNumber;
const int ImageMsg::kImageNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageMsg::ImageMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZMQMessage.ImageMsg)
}

void ImageMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ImageMsg::ImageMsg(const ImageMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ZMQMessage.ImageMsg)
}

void ImageMsg::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  image_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_width_ = 0;
  image_height_ = 0;
  image_dst_width_ = 0;
  image_dst_height_ = 0;
  image_format_ = 0;
  data_type_ = 0;
  image_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ImageMsg::~ImageMsg() {
  // @@protoc_insertion_point(destructor:ZMQMessage.ImageMsg)
  SharedDtor();
}

void ImageMsg::SharedDtor() {
  image_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ImageMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageMsg_descriptor_;
}

const ImageMsg& ImageMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zmq_5fmsg_2eproto();
  return *default_instance_;
}

ImageMsg* ImageMsg::default_instance_ = NULL;

ImageMsg* ImageMsg::New(::google::protobuf::Arena* arena) const {
  ImageMsg* n = new ImageMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:ZMQMessage.ImageMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ImageMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ImageMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(image_width_, data_type_);
  image_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ImageMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZMQMessage.ImageMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes image_data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_image_width;
        break;
      }

      // optional int32 image_width = 2;
      case 2: {
        if (tag == 16) {
         parse_image_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_image_height;
        break;
      }

      // optional int32 image_height = 3;
      case 3: {
        if (tag == 24) {
         parse_image_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_image_dst_width;
        break;
      }

      // optional int32 image_dst_width = 4;
      case 4: {
        if (tag == 32) {
         parse_image_dst_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_dst_width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_image_dst_height;
        break;
      }

      // optional int32 image_dst_height = 5;
      case 5: {
        if (tag == 40) {
         parse_image_dst_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_dst_height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_image_format;
        break;
      }

      // optional .ZMQMessage.ImageFormat image_format = 6;
      case 6: {
        if (tag == 48) {
         parse_image_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_image_format(static_cast< ::ZMQMessage::ImageFormat >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_data_type;
        break;
      }

      // optional .ZMQMessage.ImageMsg.DataType data_type = 7;
      case 7: {
        if (tag == 56) {
         parse_data_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_data_type(static_cast< ::ZMQMessage::ImageMsg_DataType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_image_name;
        break;
      }

      // optional string image_name = 8;
      case 8: {
        if (tag == 66) {
         parse_image_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image_name().data(), this->image_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ZMQMessage.ImageMsg.image_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZMQMessage.ImageMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZMQMessage.ImageMsg)
  return false;
#undef DO_
}

void ImageMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZMQMessage.ImageMsg)
  // optional bytes image_data = 1;
  if (this->image_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->image_data(), output);
  }

  // optional int32 image_width = 2;
  if (this->image_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->image_width(), output);
  }

  // optional int32 image_height = 3;
  if (this->image_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->image_height(), output);
  }

  // optional int32 image_dst_width = 4;
  if (this->image_dst_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->image_dst_width(), output);
  }

  // optional int32 image_dst_height = 5;
  if (this->image_dst_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->image_dst_height(), output);
  }

  // optional .ZMQMessage.ImageFormat image_format = 6;
  if (this->image_format() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->image_format(), output);
  }

  // optional .ZMQMessage.ImageMsg.DataType data_type = 7;
  if (this->data_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->data_type(), output);
  }

  // optional string image_name = 8;
  if (this->image_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_name().data(), this->image_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ZMQMessage.ImageMsg.image_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->image_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:ZMQMessage.ImageMsg)
}

::google::protobuf::uint8* ImageMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZMQMessage.ImageMsg)
  // optional bytes image_data = 1;
  if (this->image_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->image_data(), target);
  }

  // optional int32 image_width = 2;
  if (this->image_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->image_width(), target);
  }

  // optional int32 image_height = 3;
  if (this->image_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->image_height(), target);
  }

  // optional int32 image_dst_width = 4;
  if (this->image_dst_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->image_dst_width(), target);
  }

  // optional int32 image_dst_height = 5;
  if (this->image_dst_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->image_dst_height(), target);
  }

  // optional .ZMQMessage.ImageFormat image_format = 6;
  if (this->image_format() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->image_format(), target);
  }

  // optional .ZMQMessage.ImageMsg.DataType data_type = 7;
  if (this->data_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->data_type(), target);
  }

  // optional string image_name = 8;
  if (this->image_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_name().data(), this->image_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ZMQMessage.ImageMsg.image_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->image_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ZMQMessage.ImageMsg)
  return target;
}

int ImageMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ZMQMessage.ImageMsg)
  int total_size = 0;

  // optional bytes image_data = 1;
  if (this->image_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->image_data());
  }

  // optional int32 image_width = 2;
  if (this->image_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->image_width());
  }

  // optional int32 image_height = 3;
  if (this->image_height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->image_height());
  }

  // optional int32 image_dst_width = 4;
  if (this->image_dst_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->image_dst_width());
  }

  // optional int32 image_dst_height = 5;
  if (this->image_dst_height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->image_dst_height());
  }

  // optional .ZMQMessage.ImageFormat image_format = 6;
  if (this->image_format() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->image_format());
  }

  // optional .ZMQMessage.ImageMsg.DataType data_type = 7;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_type());
  }

  // optional string image_name = 8;
  if (this->image_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image_name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZMQMessage.ImageMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ImageMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZMQMessage.ImageMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZMQMessage.ImageMsg)
    MergeFrom(*source);
  }
}

void ImageMsg::MergeFrom(const ImageMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZMQMessage.ImageMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.image_data().size() > 0) {

    image_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_data_);
  }
  if (from.image_width() != 0) {
    set_image_width(from.image_width());
  }
  if (from.image_height() != 0) {
    set_image_height(from.image_height());
  }
  if (from.image_dst_width() != 0) {
    set_image_dst_width(from.image_dst_width());
  }
  if (from.image_dst_height() != 0) {
    set_image_dst_height(from.image_dst_height());
  }
  if (from.image_format() != 0) {
    set_image_format(from.image_format());
  }
  if (from.data_type() != 0) {
    set_data_type(from.data_type());
  }
  if (from.image_name().size() > 0) {

    image_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_name_);
  }
}

void ImageMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZMQMessage.ImageMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageMsg::CopyFrom(const ImageMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZMQMessage.ImageMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageMsg::IsInitialized() const {

  return true;
}

void ImageMsg::Swap(ImageMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageMsg::InternalSwap(ImageMsg* other) {
  image_data_.Swap(&other->image_data_);
  std::swap(image_width_, other->image_width_);
  std::swap(image_height_, other->image_height_);
  std::swap(image_dst_width_, other->image_dst_width_);
  std::swap(image_dst_height_, other->image_dst_height_);
  std::swap(image_format_, other->image_format_);
  std::swap(data_type_, other->data_type_);
  image_name_.Swap(&other->image_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageMsg_descriptor_;
  metadata.reflection = ImageMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageMsg

// optional bytes image_data = 1;
void ImageMsg::clear_image_data() {
  image_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ImageMsg::image_data() const {
  // @@protoc_insertion_point(field_get:ZMQMessage.ImageMsg.image_data)
  return image_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageMsg::set_image_data(const ::std::string& value) {
  
  image_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ZMQMessage.ImageMsg.image_data)
}
 void ImageMsg::set_image_data(const char* value) {
  
  image_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ZMQMessage.ImageMsg.image_data)
}
 void ImageMsg::set_image_data(const void* value, size_t size) {
  
  image_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ZMQMessage.ImageMsg.image_data)
}
 ::std::string* ImageMsg::mutable_image_data() {
  
  // @@protoc_insertion_point(field_mutable:ZMQMessage.ImageMsg.image_data)
  return image_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ImageMsg::release_image_data() {
  // @@protoc_insertion_point(field_release:ZMQMessage.ImageMsg.image_data)
  
  return image_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageMsg::set_allocated_image_data(::std::string* image_data) {
  if (image_data != NULL) {
    
  } else {
    
  }
  image_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_data);
  // @@protoc_insertion_point(field_set_allocated:ZMQMessage.ImageMsg.image_data)
}

// optional int32 image_width = 2;
void ImageMsg::clear_image_width() {
  image_width_ = 0;
}
 ::google::protobuf::int32 ImageMsg::image_width() const {
  // @@protoc_insertion_point(field_get:ZMQMessage.ImageMsg.image_width)
  return image_width_;
}
 void ImageMsg::set_image_width(::google::protobuf::int32 value) {
  
  image_width_ = value;
  // @@protoc_insertion_point(field_set:ZMQMessage.ImageMsg.image_width)
}

// optional int32 image_height = 3;
void ImageMsg::clear_image_height() {
  image_height_ = 0;
}
 ::google::protobuf::int32 ImageMsg::image_height() const {
  // @@protoc_insertion_point(field_get:ZMQMessage.ImageMsg.image_height)
  return image_height_;
}
 void ImageMsg::set_image_height(::google::protobuf::int32 value) {
  
  image_height_ = value;
  // @@protoc_insertion_point(field_set:ZMQMessage.ImageMsg.image_height)
}

// optional int32 image_dst_width = 4;
void ImageMsg::clear_image_dst_width() {
  image_dst_width_ = 0;
}
 ::google::protobuf::int32 ImageMsg::image_dst_width() const {
  // @@protoc_insertion_point(field_get:ZMQMessage.ImageMsg.image_dst_width)
  return image_dst_width_;
}
 void ImageMsg::set_image_dst_width(::google::protobuf::int32 value) {
  
  image_dst_width_ = value;
  // @@protoc_insertion_point(field_set:ZMQMessage.ImageMsg.image_dst_width)
}

// optional int32 image_dst_height = 5;
void ImageMsg::clear_image_dst_height() {
  image_dst_height_ = 0;
}
 ::google::protobuf::int32 ImageMsg::image_dst_height() const {
  // @@protoc_insertion_point(field_get:ZMQMessage.ImageMsg.image_dst_height)
  return image_dst_height_;
}
 void ImageMsg::set_image_dst_height(::google::protobuf::int32 value) {
  
  image_dst_height_ = value;
  // @@protoc_insertion_point(field_set:ZMQMessage.ImageMsg.image_dst_height)
}

// optional .ZMQMessage.ImageFormat image_format = 6;
void ImageMsg::clear_image_format() {
  image_format_ = 0;
}
 ::ZMQMessage::ImageFormat ImageMsg::image_format() const {
  // @@protoc_insertion_point(field_get:ZMQMessage.ImageMsg.image_format)
  return static_cast< ::ZMQMessage::ImageFormat >(image_format_);
}
 void ImageMsg::set_image_format(::ZMQMessage::ImageFormat value) {
  
  image_format_ = value;
  // @@protoc_insertion_point(field_set:ZMQMessage.ImageMsg.image_format)
}

// optional .ZMQMessage.ImageMsg.DataType data_type = 7;
void ImageMsg::clear_data_type() {
  data_type_ = 0;
}
 ::ZMQMessage::ImageMsg_DataType ImageMsg::data_type() const {
  // @@protoc_insertion_point(field_get:ZMQMessage.ImageMsg.data_type)
  return static_cast< ::ZMQMessage::ImageMsg_DataType >(data_type_);
}
 void ImageMsg::set_data_type(::ZMQMessage::ImageMsg_DataType value) {
  
  data_type_ = value;
  // @@protoc_insertion_point(field_set:ZMQMessage.ImageMsg.data_type)
}

// optional string image_name = 8;
void ImageMsg::clear_image_name() {
  image_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ImageMsg::image_name() const {
  // @@protoc_insertion_point(field_get:ZMQMessage.ImageMsg.image_name)
  return image_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageMsg::set_image_name(const ::std::string& value) {
  
  image_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ZMQMessage.ImageMsg.image_name)
}
 void ImageMsg::set_image_name(const char* value) {
  
  image_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ZMQMessage.ImageMsg.image_name)
}
 void ImageMsg::set_image_name(const char* value, size_t size) {
  
  image_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ZMQMessage.ImageMsg.image_name)
}
 ::std::string* ImageMsg::mutable_image_name() {
  
  // @@protoc_insertion_point(field_mutable:ZMQMessage.ImageMsg.image_name)
  return image_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ImageMsg::release_image_name() {
  // @@protoc_insertion_point(field_release:ZMQMessage.ImageMsg.image_name)
  
  return image_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageMsg::set_allocated_image_name(::std::string* image_name) {
  if (image_name != NULL) {
    
  } else {
    
  }
  image_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_name);
  // @@protoc_insertion_point(field_set_allocated:ZMQMessage.ImageMsg.image_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ZMQMsg_MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZMQMsg_MsgType_descriptor_;
}
bool ZMQMsg_MsgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ZMQMsg_MsgType ZMQMsg::IMAGE_MSG;
const ZMQMsg_MsgType ZMQMsg::FINISH_MSG;
const ZMQMsg_MsgType ZMQMsg::MsgType_MIN;
const ZMQMsg_MsgType ZMQMsg::MsgType_MAX;
const int ZMQMsg::MsgType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ZMQMsg::kMsgTypeFieldNumber;
const int ZMQMsg::kImgMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ZMQMsg::ZMQMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZMQMessage.ZMQMsg)
}

void ZMQMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  img_msg_ = const_cast< ::ZMQMessage::ImageMsg*>(&::ZMQMessage::ImageMsg::default_instance());
}

ZMQMsg::ZMQMsg(const ZMQMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ZMQMessage.ZMQMsg)
}

void ZMQMsg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  msg_type_ = 0;
  img_msg_ = NULL;
}

ZMQMsg::~ZMQMsg() {
  // @@protoc_insertion_point(destructor:ZMQMessage.ZMQMsg)
  SharedDtor();
}

void ZMQMsg::SharedDtor() {
  if (this != default_instance_) {
    delete img_msg_;
  }
}

void ZMQMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZMQMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZMQMsg_descriptor_;
}

const ZMQMsg& ZMQMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zmq_5fmsg_2eproto();
  return *default_instance_;
}

ZMQMsg* ZMQMsg::default_instance_ = NULL;

ZMQMsg* ZMQMsg::New(::google::protobuf::Arena* arena) const {
  ZMQMsg* n = new ZMQMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ZMQMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:ZMQMessage.ZMQMsg)
  msg_type_ = 0;
  if (GetArenaNoVirtual() == NULL && img_msg_ != NULL) delete img_msg_;
  img_msg_ = NULL;
}

bool ZMQMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZMQMessage.ZMQMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ZMQMessage.ZMQMsg.MsgType msg_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_msg_type(static_cast< ::ZMQMessage::ZMQMsg_MsgType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_img_msg;
        break;
      }

      // optional .ZMQMessage.ImageMsg img_msg = 2;
      case 2: {
        if (tag == 18) {
         parse_img_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZMQMessage.ZMQMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZMQMessage.ZMQMsg)
  return false;
#undef DO_
}

void ZMQMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZMQMessage.ZMQMsg)
  // optional .ZMQMessage.ZMQMsg.MsgType msg_type = 1;
  if (this->msg_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_type(), output);
  }

  // optional .ZMQMessage.ImageMsg img_msg = 2;
  if (this->has_img_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->img_msg_, output);
  }

  // @@protoc_insertion_point(serialize_end:ZMQMessage.ZMQMsg)
}

::google::protobuf::uint8* ZMQMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZMQMessage.ZMQMsg)
  // optional .ZMQMessage.ZMQMsg.MsgType msg_type = 1;
  if (this->msg_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_type(), target);
  }

  // optional .ZMQMessage.ImageMsg img_msg = 2;
  if (this->has_img_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->img_msg_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ZMQMessage.ZMQMsg)
  return target;
}

int ZMQMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ZMQMessage.ZMQMsg)
  int total_size = 0;

  // optional .ZMQMessage.ZMQMsg.MsgType msg_type = 1;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
  }

  // optional .ZMQMessage.ImageMsg img_msg = 2;
  if (this->has_img_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->img_msg_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZMQMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZMQMessage.ZMQMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ZMQMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ZMQMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZMQMessage.ZMQMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZMQMessage.ZMQMsg)
    MergeFrom(*source);
  }
}

void ZMQMsg::MergeFrom(const ZMQMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZMQMessage.ZMQMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.msg_type() != 0) {
    set_msg_type(from.msg_type());
  }
  if (from.has_img_msg()) {
    mutable_img_msg()->::ZMQMessage::ImageMsg::MergeFrom(from.img_msg());
  }
}

void ZMQMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZMQMessage.ZMQMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZMQMsg::CopyFrom(const ZMQMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZMQMessage.ZMQMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZMQMsg::IsInitialized() const {

  return true;
}

void ZMQMsg::Swap(ZMQMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ZMQMsg::InternalSwap(ZMQMsg* other) {
  std::swap(msg_type_, other->msg_type_);
  std::swap(img_msg_, other->img_msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ZMQMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZMQMsg_descriptor_;
  metadata.reflection = ZMQMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ZMQMsg

// optional .ZMQMessage.ZMQMsg.MsgType msg_type = 1;
void ZMQMsg::clear_msg_type() {
  msg_type_ = 0;
}
 ::ZMQMessage::ZMQMsg_MsgType ZMQMsg::msg_type() const {
  // @@protoc_insertion_point(field_get:ZMQMessage.ZMQMsg.msg_type)
  return static_cast< ::ZMQMessage::ZMQMsg_MsgType >(msg_type_);
}
 void ZMQMsg::set_msg_type(::ZMQMessage::ZMQMsg_MsgType value) {
  
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:ZMQMessage.ZMQMsg.msg_type)
}

// optional .ZMQMessage.ImageMsg img_msg = 2;
bool ZMQMsg::has_img_msg() const {
  return !_is_default_instance_ && img_msg_ != NULL;
}
void ZMQMsg::clear_img_msg() {
  if (GetArenaNoVirtual() == NULL && img_msg_ != NULL) delete img_msg_;
  img_msg_ = NULL;
}
const ::ZMQMessage::ImageMsg& ZMQMsg::img_msg() const {
  // @@protoc_insertion_point(field_get:ZMQMessage.ZMQMsg.img_msg)
  return img_msg_ != NULL ? *img_msg_ : *default_instance_->img_msg_;
}
::ZMQMessage::ImageMsg* ZMQMsg::mutable_img_msg() {
  
  if (img_msg_ == NULL) {
    img_msg_ = new ::ZMQMessage::ImageMsg;
  }
  // @@protoc_insertion_point(field_mutable:ZMQMessage.ZMQMsg.img_msg)
  return img_msg_;
}
::ZMQMessage::ImageMsg* ZMQMsg::release_img_msg() {
  // @@protoc_insertion_point(field_release:ZMQMessage.ZMQMsg.img_msg)
  
  ::ZMQMessage::ImageMsg* temp = img_msg_;
  img_msg_ = NULL;
  return temp;
}
void ZMQMsg::set_allocated_img_msg(::ZMQMessage::ImageMsg* img_msg) {
  delete img_msg_;
  img_msg_ = img_msg;
  if (img_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZMQMessage.ZMQMsg.img_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ZMQMessage

// @@protoc_insertion_point(global_scope)
