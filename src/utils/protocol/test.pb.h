// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_test_2eproto__INCLUDED
#define PROTOBUF_test_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ImageInfo {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_test_2eproto();
void protobuf_AssignDesc_test_2eproto();
void protobuf_ShutdownFile_test_2eproto();

class image_info;

enum image_info_Tasktype {
  image_info_Tasktype_classification = 0,
  image_info_Tasktype_detection = 1,
  image_info_Tasktype_segmentation = 2,
  image_info_Tasktype_instance = 3
};
bool image_info_Tasktype_IsValid(int value);
const image_info_Tasktype image_info_Tasktype_Tasktype_MIN = image_info_Tasktype_classification;
const image_info_Tasktype image_info_Tasktype_Tasktype_MAX = image_info_Tasktype_instance;
const int image_info_Tasktype_Tasktype_ARRAYSIZE = image_info_Tasktype_Tasktype_MAX + 1;

const ::google::protobuf::EnumDescriptor* image_info_Tasktype_descriptor();
inline const ::std::string& image_info_Tasktype_Name(image_info_Tasktype value) {
  return ::google::protobuf::internal::NameOfEnum(
    image_info_Tasktype_descriptor(), value);
}
inline bool image_info_Tasktype_Parse(
    const ::std::string& name, image_info_Tasktype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<image_info_Tasktype>(
    image_info_Tasktype_descriptor(), name, value);
}
// ===================================================================

class image_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ImageInfo.image_info) */ {
 public:
  image_info();
  virtual ~image_info();

  image_info(const image_info& from);

  inline image_info& operator=(const image_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const image_info& default_instance();

  void Swap(image_info* other);

  // implements Message ----------------------------------------------

  inline image_info* New() const { return New(NULL); }

  image_info* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const image_info& from);
  void MergeFrom(const image_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(image_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef image_info_Tasktype Tasktype;
  static const Tasktype classification =
    image_info_Tasktype_classification;
  static const Tasktype detection =
    image_info_Tasktype_detection;
  static const Tasktype segmentation =
    image_info_Tasktype_segmentation;
  static const Tasktype instance =
    image_info_Tasktype_instance;
  static inline bool Tasktype_IsValid(int value) {
    return image_info_Tasktype_IsValid(value);
  }
  static const Tasktype Tasktype_MIN =
    image_info_Tasktype_Tasktype_MIN;
  static const Tasktype Tasktype_MAX =
    image_info_Tasktype_Tasktype_MAX;
  static const int Tasktype_ARRAYSIZE =
    image_info_Tasktype_Tasktype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tasktype_descriptor() {
    return image_info_Tasktype_descriptor();
  }
  static inline const ::std::string& Tasktype_Name(Tasktype value) {
    return image_info_Tasktype_Name(value);
  }
  static inline bool Tasktype_Parse(const ::std::string& name,
      Tasktype* value) {
    return image_info_Tasktype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 image_data = 1;
  int image_data_size() const;
  void clear_image_data();
  static const int kImageDataFieldNumber = 1;
  ::google::protobuf::uint32 image_data(int index) const;
  void set_image_data(int index, ::google::protobuf::uint32 value);
  void add_image_data(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      image_data() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_image_data();

  // required .ImageInfo.image_info.Tasktype task_type = 2;
  bool has_task_type() const;
  void clear_task_type();
  static const int kTaskTypeFieldNumber = 2;
  ::ImageInfo::image_info_Tasktype task_type() const;
  void set_task_type(::ImageInfo::image_info_Tasktype value);

  // required int32 image_width = 3;
  bool has_image_width() const;
  void clear_image_width();
  static const int kImageWidthFieldNumber = 3;
  ::google::protobuf::int32 image_width() const;
  void set_image_width(::google::protobuf::int32 value);

  // required int32 image_height = 4;
  bool has_image_height() const;
  void clear_image_height();
  static const int kImageHeightFieldNumber = 4;
  ::google::protobuf::int32 image_height() const;
  void set_image_height(::google::protobuf::int32 value);

  // required string image_name = 5;
  bool has_image_name() const;
  void clear_image_name();
  static const int kImageNameFieldNumber = 5;
  const ::std::string& image_name() const;
  void set_image_name(const ::std::string& value);
  void set_image_name(const char* value);
  void set_image_name(const char* value, size_t size);
  ::std::string* mutable_image_name();
  ::std::string* release_image_name();
  void set_allocated_image_name(::std::string* image_name);

  // optional string model_name = 6;
  bool has_model_name() const;
  void clear_model_name();
  static const int kModelNameFieldNumber = 6;
  const ::std::string& model_name() const;
  void set_model_name(const ::std::string& value);
  void set_model_name(const char* value);
  void set_model_name(const char* value, size_t size);
  ::std::string* mutable_model_name();
  ::std::string* release_model_name();
  void set_allocated_model_name(::std::string* model_name);

  // optional int32 image_valid_height = 7;
  bool has_image_valid_height() const;
  void clear_image_valid_height();
  static const int kImageValidHeightFieldNumber = 7;
  ::google::protobuf::int32 image_valid_height() const;
  void set_image_valid_height(::google::protobuf::int32 value);

  // optional int32 image_valid_width = 8;
  bool has_image_valid_width() const;
  void clear_image_valid_width();
  static const int kImageValidWidthFieldNumber = 8;
  ::google::protobuf::int32 image_valid_width() const;
  void set_image_valid_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ImageInfo.image_info)
 private:
  inline void set_has_task_type();
  inline void clear_has_task_type();
  inline void set_has_image_width();
  inline void clear_has_image_width();
  inline void set_has_image_height();
  inline void clear_has_image_height();
  inline void set_has_image_name();
  inline void clear_has_image_name();
  inline void set_has_model_name();
  inline void clear_has_model_name();
  inline void set_has_image_valid_height();
  inline void clear_has_image_valid_height();
  inline void set_has_image_valid_width();
  inline void clear_has_image_valid_width();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > image_data_;
  int task_type_;
  ::google::protobuf::int32 image_width_;
  ::google::protobuf::internal::ArenaStringPtr image_name_;
  ::google::protobuf::int32 image_height_;
  ::google::protobuf::int32 image_valid_height_;
  ::google::protobuf::internal::ArenaStringPtr model_name_;
  ::google::protobuf::int32 image_valid_width_;
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static image_info* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// image_info

// repeated uint32 image_data = 1;
inline int image_info::image_data_size() const {
  return image_data_.size();
}
inline void image_info::clear_image_data() {
  image_data_.Clear();
}
inline ::google::protobuf::uint32 image_info::image_data(int index) const {
  // @@protoc_insertion_point(field_get:ImageInfo.image_info.image_data)
  return image_data_.Get(index);
}
inline void image_info::set_image_data(int index, ::google::protobuf::uint32 value) {
  image_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:ImageInfo.image_info.image_data)
}
inline void image_info::add_image_data(::google::protobuf::uint32 value) {
  image_data_.Add(value);
  // @@protoc_insertion_point(field_add:ImageInfo.image_info.image_data)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
image_info::image_data() const {
  // @@protoc_insertion_point(field_list:ImageInfo.image_info.image_data)
  return image_data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
image_info::mutable_image_data() {
  // @@protoc_insertion_point(field_mutable_list:ImageInfo.image_info.image_data)
  return &image_data_;
}

// required .ImageInfo.image_info.Tasktype task_type = 2;
inline bool image_info::has_task_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void image_info::set_has_task_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void image_info::clear_has_task_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void image_info::clear_task_type() {
  task_type_ = 0;
  clear_has_task_type();
}
inline ::ImageInfo::image_info_Tasktype image_info::task_type() const {
  // @@protoc_insertion_point(field_get:ImageInfo.image_info.task_type)
  return static_cast< ::ImageInfo::image_info_Tasktype >(task_type_);
}
inline void image_info::set_task_type(::ImageInfo::image_info_Tasktype value) {
  assert(::ImageInfo::image_info_Tasktype_IsValid(value));
  set_has_task_type();
  task_type_ = value;
  // @@protoc_insertion_point(field_set:ImageInfo.image_info.task_type)
}

// required int32 image_width = 3;
inline bool image_info::has_image_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void image_info::set_has_image_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void image_info::clear_has_image_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void image_info::clear_image_width() {
  image_width_ = 0;
  clear_has_image_width();
}
inline ::google::protobuf::int32 image_info::image_width() const {
  // @@protoc_insertion_point(field_get:ImageInfo.image_info.image_width)
  return image_width_;
}
inline void image_info::set_image_width(::google::protobuf::int32 value) {
  set_has_image_width();
  image_width_ = value;
  // @@protoc_insertion_point(field_set:ImageInfo.image_info.image_width)
}

// required int32 image_height = 4;
inline bool image_info::has_image_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void image_info::set_has_image_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void image_info::clear_has_image_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void image_info::clear_image_height() {
  image_height_ = 0;
  clear_has_image_height();
}
inline ::google::protobuf::int32 image_info::image_height() const {
  // @@protoc_insertion_point(field_get:ImageInfo.image_info.image_height)
  return image_height_;
}
inline void image_info::set_image_height(::google::protobuf::int32 value) {
  set_has_image_height();
  image_height_ = value;
  // @@protoc_insertion_point(field_set:ImageInfo.image_info.image_height)
}

// required string image_name = 5;
inline bool image_info::has_image_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void image_info::set_has_image_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void image_info::clear_has_image_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void image_info::clear_image_name() {
  image_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_image_name();
}
inline const ::std::string& image_info::image_name() const {
  // @@protoc_insertion_point(field_get:ImageInfo.image_info.image_name)
  return image_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void image_info::set_image_name(const ::std::string& value) {
  set_has_image_name();
  image_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageInfo.image_info.image_name)
}
inline void image_info::set_image_name(const char* value) {
  set_has_image_name();
  image_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageInfo.image_info.image_name)
}
inline void image_info::set_image_name(const char* value, size_t size) {
  set_has_image_name();
  image_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageInfo.image_info.image_name)
}
inline ::std::string* image_info::mutable_image_name() {
  set_has_image_name();
  // @@protoc_insertion_point(field_mutable:ImageInfo.image_info.image_name)
  return image_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* image_info::release_image_name() {
  // @@protoc_insertion_point(field_release:ImageInfo.image_info.image_name)
  clear_has_image_name();
  return image_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void image_info::set_allocated_image_name(::std::string* image_name) {
  if (image_name != NULL) {
    set_has_image_name();
  } else {
    clear_has_image_name();
  }
  image_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_name);
  // @@protoc_insertion_point(field_set_allocated:ImageInfo.image_info.image_name)
}

// optional string model_name = 6;
inline bool image_info::has_model_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void image_info::set_has_model_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void image_info::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void image_info::clear_model_name() {
  model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model_name();
}
inline const ::std::string& image_info::model_name() const {
  // @@protoc_insertion_point(field_get:ImageInfo.image_info.model_name)
  return model_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void image_info::set_model_name(const ::std::string& value) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageInfo.image_info.model_name)
}
inline void image_info::set_model_name(const char* value) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageInfo.image_info.model_name)
}
inline void image_info::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageInfo.image_info.model_name)
}
inline ::std::string* image_info::mutable_model_name() {
  set_has_model_name();
  // @@protoc_insertion_point(field_mutable:ImageInfo.image_info.model_name)
  return model_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* image_info::release_model_name() {
  // @@protoc_insertion_point(field_release:ImageInfo.image_info.model_name)
  clear_has_model_name();
  return model_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void image_info::set_allocated_model_name(::std::string* model_name) {
  if (model_name != NULL) {
    set_has_model_name();
  } else {
    clear_has_model_name();
  }
  model_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_name);
  // @@protoc_insertion_point(field_set_allocated:ImageInfo.image_info.model_name)
}

// optional int32 image_valid_height = 7;
inline bool image_info::has_image_valid_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void image_info::set_has_image_valid_height() {
  _has_bits_[0] |= 0x00000040u;
}
inline void image_info::clear_has_image_valid_height() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void image_info::clear_image_valid_height() {
  image_valid_height_ = 0;
  clear_has_image_valid_height();
}
inline ::google::protobuf::int32 image_info::image_valid_height() const {
  // @@protoc_insertion_point(field_get:ImageInfo.image_info.image_valid_height)
  return image_valid_height_;
}
inline void image_info::set_image_valid_height(::google::protobuf::int32 value) {
  set_has_image_valid_height();
  image_valid_height_ = value;
  // @@protoc_insertion_point(field_set:ImageInfo.image_info.image_valid_height)
}

// optional int32 image_valid_width = 8;
inline bool image_info::has_image_valid_width() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void image_info::set_has_image_valid_width() {
  _has_bits_[0] |= 0x00000080u;
}
inline void image_info::clear_has_image_valid_width() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void image_info::clear_image_valid_width() {
  image_valid_width_ = 0;
  clear_has_image_valid_width();
}
inline ::google::protobuf::int32 image_info::image_valid_width() const {
  // @@protoc_insertion_point(field_get:ImageInfo.image_info.image_valid_width)
  return image_valid_width_;
}
inline void image_info::set_image_valid_width(::google::protobuf::int32 value) {
  set_has_image_valid_width();
  image_valid_width_ = value;
  // @@protoc_insertion_point(field_set:ImageInfo.image_info.image_valid_width)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ImageInfo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ImageInfo::image_info_Tasktype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ImageInfo::image_info_Tasktype>() {
  return ::ImageInfo::image_info_Tasktype_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_2eproto__INCLUDED
