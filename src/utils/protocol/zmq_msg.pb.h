// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zmq_msg.proto

#ifndef PROTOBUF_zmq_5fmsg_2eproto__INCLUDED
#define PROTOBUF_zmq_5fmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ZMQMessage {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_zmq_5fmsg_2eproto();
void protobuf_AssignDesc_zmq_5fmsg_2eproto();
void protobuf_ShutdownFile_zmq_5fmsg_2eproto();

class ImageMsg;
class ZMQMsg;

enum ImageMsg_DataType {
  ImageMsg_DataType_UINT8 = 0,
  ImageMsg_DataType_INT32 = 1,
  ImageMsg_DataType_FLOAT32 = 2,
  ImageMsg_DataType_ImageMsg_DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ImageMsg_DataType_ImageMsg_DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ImageMsg_DataType_IsValid(int value);
const ImageMsg_DataType ImageMsg_DataType_DataType_MIN = ImageMsg_DataType_UINT8;
const ImageMsg_DataType ImageMsg_DataType_DataType_MAX = ImageMsg_DataType_FLOAT32;
const int ImageMsg_DataType_DataType_ARRAYSIZE = ImageMsg_DataType_DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ImageMsg_DataType_descriptor();
inline const ::std::string& ImageMsg_DataType_Name(ImageMsg_DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ImageMsg_DataType_descriptor(), value);
}
inline bool ImageMsg_DataType_Parse(
    const ::std::string& name, ImageMsg_DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ImageMsg_DataType>(
    ImageMsg_DataType_descriptor(), name, value);
}
enum ZMQMsg_MsgType {
  ZMQMsg_MsgType_IMAGE_MSG = 0,
  ZMQMsg_MsgType_FINISH_MSG = 1,
  ZMQMsg_MsgType_ZMQMsg_MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ZMQMsg_MsgType_ZMQMsg_MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ZMQMsg_MsgType_IsValid(int value);
const ZMQMsg_MsgType ZMQMsg_MsgType_MsgType_MIN = ZMQMsg_MsgType_IMAGE_MSG;
const ZMQMsg_MsgType ZMQMsg_MsgType_MsgType_MAX = ZMQMsg_MsgType_FINISH_MSG;
const int ZMQMsg_MsgType_MsgType_ARRAYSIZE = ZMQMsg_MsgType_MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ZMQMsg_MsgType_descriptor();
inline const ::std::string& ZMQMsg_MsgType_Name(ZMQMsg_MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ZMQMsg_MsgType_descriptor(), value);
}
inline bool ZMQMsg_MsgType_Parse(
    const ::std::string& name, ZMQMsg_MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ZMQMsg_MsgType>(
    ZMQMsg_MsgType_descriptor(), name, value);
}
enum ImageFormat {
  IMG_Y = 0,
  IMG_NV12 = 1,
  IMG_YUV444 = 2,
  IMG_BGR = 3,
  IMG_BGRP = 4,
  IMG_RGB = 5,
  IMG_RGBP = 6,
  TENSOR_U8 = 7,
  TENSOR_S8 = 8,
  TENSOR_F32 = 9,
  TENSOR_S32 = 10,
  TENSOR_U32 = 11,
  MAX = 12,
  ImageFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ImageFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ImageFormat_IsValid(int value);
const ImageFormat ImageFormat_MIN = IMG_Y;
const ImageFormat ImageFormat_MAX = MAX;
const int ImageFormat_ARRAYSIZE = ImageFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* ImageFormat_descriptor();
inline const ::std::string& ImageFormat_Name(ImageFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    ImageFormat_descriptor(), value);
}
inline bool ImageFormat_Parse(
    const ::std::string& name, ImageFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ImageFormat>(
    ImageFormat_descriptor(), name, value);
}
// ===================================================================

class ImageMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ZMQMessage.ImageMsg) */ {
 public:
  ImageMsg();
  virtual ~ImageMsg();

  ImageMsg(const ImageMsg& from);

  inline ImageMsg& operator=(const ImageMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageMsg& default_instance();

  void Swap(ImageMsg* other);

  // implements Message ----------------------------------------------

  inline ImageMsg* New() const { return New(NULL); }

  ImageMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageMsg& from);
  void MergeFrom(const ImageMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImageMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ImageMsg_DataType DataType;
  static const DataType UINT8 =
    ImageMsg_DataType_UINT8;
  static const DataType INT32 =
    ImageMsg_DataType_INT32;
  static const DataType FLOAT32 =
    ImageMsg_DataType_FLOAT32;
  static inline bool DataType_IsValid(int value) {
    return ImageMsg_DataType_IsValid(value);
  }
  static const DataType DataType_MIN =
    ImageMsg_DataType_DataType_MIN;
  static const DataType DataType_MAX =
    ImageMsg_DataType_DataType_MAX;
  static const int DataType_ARRAYSIZE =
    ImageMsg_DataType_DataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataType_descriptor() {
    return ImageMsg_DataType_descriptor();
  }
  static inline const ::std::string& DataType_Name(DataType value) {
    return ImageMsg_DataType_Name(value);
  }
  static inline bool DataType_Parse(const ::std::string& name,
      DataType* value) {
    return ImageMsg_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bytes image_data = 1;
  void clear_image_data();
  static const int kImageDataFieldNumber = 1;
  const ::std::string& image_data() const;
  void set_image_data(const ::std::string& value);
  void set_image_data(const char* value);
  void set_image_data(const void* value, size_t size);
  ::std::string* mutable_image_data();
  ::std::string* release_image_data();
  void set_allocated_image_data(::std::string* image_data);

  // optional int32 image_width = 2;
  void clear_image_width();
  static const int kImageWidthFieldNumber = 2;
  ::google::protobuf::int32 image_width() const;
  void set_image_width(::google::protobuf::int32 value);

  // optional int32 image_height = 3;
  void clear_image_height();
  static const int kImageHeightFieldNumber = 3;
  ::google::protobuf::int32 image_height() const;
  void set_image_height(::google::protobuf::int32 value);

  // optional int32 image_dst_width = 4;
  void clear_image_dst_width();
  static const int kImageDstWidthFieldNumber = 4;
  ::google::protobuf::int32 image_dst_width() const;
  void set_image_dst_width(::google::protobuf::int32 value);

  // optional int32 image_dst_height = 5;
  void clear_image_dst_height();
  static const int kImageDstHeightFieldNumber = 5;
  ::google::protobuf::int32 image_dst_height() const;
  void set_image_dst_height(::google::protobuf::int32 value);

  // optional .ZMQMessage.ImageFormat image_format = 6;
  void clear_image_format();
  static const int kImageFormatFieldNumber = 6;
  ::ZMQMessage::ImageFormat image_format() const;
  void set_image_format(::ZMQMessage::ImageFormat value);

  // optional .ZMQMessage.ImageMsg.DataType data_type = 7;
  void clear_data_type();
  static const int kDataTypeFieldNumber = 7;
  ::ZMQMessage::ImageMsg_DataType data_type() const;
  void set_data_type(::ZMQMessage::ImageMsg_DataType value);

  // optional string image_name = 8;
  void clear_image_name();
  static const int kImageNameFieldNumber = 8;
  const ::std::string& image_name() const;
  void set_image_name(const ::std::string& value);
  void set_image_name(const char* value);
  void set_image_name(const char* value, size_t size);
  ::std::string* mutable_image_name();
  ::std::string* release_image_name();
  void set_allocated_image_name(::std::string* image_name);

  // @@protoc_insertion_point(class_scope:ZMQMessage.ImageMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr image_data_;
  ::google::protobuf::int32 image_width_;
  ::google::protobuf::int32 image_height_;
  ::google::protobuf::int32 image_dst_width_;
  ::google::protobuf::int32 image_dst_height_;
  int image_format_;
  int data_type_;
  ::google::protobuf::internal::ArenaStringPtr image_name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_zmq_5fmsg_2eproto();
  friend void protobuf_AssignDesc_zmq_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_zmq_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static ImageMsg* default_instance_;
};
// -------------------------------------------------------------------

class ZMQMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ZMQMessage.ZMQMsg) */ {
 public:
  ZMQMsg();
  virtual ~ZMQMsg();

  ZMQMsg(const ZMQMsg& from);

  inline ZMQMsg& operator=(const ZMQMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZMQMsg& default_instance();

  void Swap(ZMQMsg* other);

  // implements Message ----------------------------------------------

  inline ZMQMsg* New() const { return New(NULL); }

  ZMQMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZMQMsg& from);
  void MergeFrom(const ZMQMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ZMQMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ZMQMsg_MsgType MsgType;
  static const MsgType IMAGE_MSG =
    ZMQMsg_MsgType_IMAGE_MSG;
  static const MsgType FINISH_MSG =
    ZMQMsg_MsgType_FINISH_MSG;
  static inline bool MsgType_IsValid(int value) {
    return ZMQMsg_MsgType_IsValid(value);
  }
  static const MsgType MsgType_MIN =
    ZMQMsg_MsgType_MsgType_MIN;
  static const MsgType MsgType_MAX =
    ZMQMsg_MsgType_MsgType_MAX;
  static const int MsgType_ARRAYSIZE =
    ZMQMsg_MsgType_MsgType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgType_descriptor() {
    return ZMQMsg_MsgType_descriptor();
  }
  static inline const ::std::string& MsgType_Name(MsgType value) {
    return ZMQMsg_MsgType_Name(value);
  }
  static inline bool MsgType_Parse(const ::std::string& name,
      MsgType* value) {
    return ZMQMsg_MsgType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .ZMQMessage.ZMQMsg.MsgType msg_type = 1;
  void clear_msg_type();
  static const int kMsgTypeFieldNumber = 1;
  ::ZMQMessage::ZMQMsg_MsgType msg_type() const;
  void set_msg_type(::ZMQMessage::ZMQMsg_MsgType value);

  // optional .ZMQMessage.ImageMsg img_msg = 2;
  bool has_img_msg() const;
  void clear_img_msg();
  static const int kImgMsgFieldNumber = 2;
  const ::ZMQMessage::ImageMsg& img_msg() const;
  ::ZMQMessage::ImageMsg* mutable_img_msg();
  ::ZMQMessage::ImageMsg* release_img_msg();
  void set_allocated_img_msg(::ZMQMessage::ImageMsg* img_msg);

  // @@protoc_insertion_point(class_scope:ZMQMessage.ZMQMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::ZMQMessage::ImageMsg* img_msg_;
  int msg_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_zmq_5fmsg_2eproto();
  friend void protobuf_AssignDesc_zmq_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_zmq_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static ZMQMsg* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageMsg

// optional bytes image_data = 1;
inline void ImageMsg::clear_image_data() {
  image_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageMsg::image_data() const {
  // @@protoc_insertion_point(field_get:ZMQMessage.ImageMsg.image_data)
  return image_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageMsg::set_image_data(const ::std::string& value) {
  
  image_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ZMQMessage.ImageMsg.image_data)
}
inline void ImageMsg::set_image_data(const char* value) {
  
  image_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ZMQMessage.ImageMsg.image_data)
}
inline void ImageMsg::set_image_data(const void* value, size_t size) {
  
  image_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ZMQMessage.ImageMsg.image_data)
}
inline ::std::string* ImageMsg::mutable_image_data() {
  
  // @@protoc_insertion_point(field_mutable:ZMQMessage.ImageMsg.image_data)
  return image_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageMsg::release_image_data() {
  // @@protoc_insertion_point(field_release:ZMQMessage.ImageMsg.image_data)
  
  return image_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageMsg::set_allocated_image_data(::std::string* image_data) {
  if (image_data != NULL) {
    
  } else {
    
  }
  image_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_data);
  // @@protoc_insertion_point(field_set_allocated:ZMQMessage.ImageMsg.image_data)
}

// optional int32 image_width = 2;
inline void ImageMsg::clear_image_width() {
  image_width_ = 0;
}
inline ::google::protobuf::int32 ImageMsg::image_width() const {
  // @@protoc_insertion_point(field_get:ZMQMessage.ImageMsg.image_width)
  return image_width_;
}
inline void ImageMsg::set_image_width(::google::protobuf::int32 value) {
  
  image_width_ = value;
  // @@protoc_insertion_point(field_set:ZMQMessage.ImageMsg.image_width)
}

// optional int32 image_height = 3;
inline void ImageMsg::clear_image_height() {
  image_height_ = 0;
}
inline ::google::protobuf::int32 ImageMsg::image_height() const {
  // @@protoc_insertion_point(field_get:ZMQMessage.ImageMsg.image_height)
  return image_height_;
}
inline void ImageMsg::set_image_height(::google::protobuf::int32 value) {
  
  image_height_ = value;
  // @@protoc_insertion_point(field_set:ZMQMessage.ImageMsg.image_height)
}

// optional int32 image_dst_width = 4;
inline void ImageMsg::clear_image_dst_width() {
  image_dst_width_ = 0;
}
inline ::google::protobuf::int32 ImageMsg::image_dst_width() const {
  // @@protoc_insertion_point(field_get:ZMQMessage.ImageMsg.image_dst_width)
  return image_dst_width_;
}
inline void ImageMsg::set_image_dst_width(::google::protobuf::int32 value) {
  
  image_dst_width_ = value;
  // @@protoc_insertion_point(field_set:ZMQMessage.ImageMsg.image_dst_width)
}

// optional int32 image_dst_height = 5;
inline void ImageMsg::clear_image_dst_height() {
  image_dst_height_ = 0;
}
inline ::google::protobuf::int32 ImageMsg::image_dst_height() const {
  // @@protoc_insertion_point(field_get:ZMQMessage.ImageMsg.image_dst_height)
  return image_dst_height_;
}
inline void ImageMsg::set_image_dst_height(::google::protobuf::int32 value) {
  
  image_dst_height_ = value;
  // @@protoc_insertion_point(field_set:ZMQMessage.ImageMsg.image_dst_height)
}

// optional .ZMQMessage.ImageFormat image_format = 6;
inline void ImageMsg::clear_image_format() {
  image_format_ = 0;
}
inline ::ZMQMessage::ImageFormat ImageMsg::image_format() const {
  // @@protoc_insertion_point(field_get:ZMQMessage.ImageMsg.image_format)
  return static_cast< ::ZMQMessage::ImageFormat >(image_format_);
}
inline void ImageMsg::set_image_format(::ZMQMessage::ImageFormat value) {
  
  image_format_ = value;
  // @@protoc_insertion_point(field_set:ZMQMessage.ImageMsg.image_format)
}

// optional .ZMQMessage.ImageMsg.DataType data_type = 7;
inline void ImageMsg::clear_data_type() {
  data_type_ = 0;
}
inline ::ZMQMessage::ImageMsg_DataType ImageMsg::data_type() const {
  // @@protoc_insertion_point(field_get:ZMQMessage.ImageMsg.data_type)
  return static_cast< ::ZMQMessage::ImageMsg_DataType >(data_type_);
}
inline void ImageMsg::set_data_type(::ZMQMessage::ImageMsg_DataType value) {
  
  data_type_ = value;
  // @@protoc_insertion_point(field_set:ZMQMessage.ImageMsg.data_type)
}

// optional string image_name = 8;
inline void ImageMsg::clear_image_name() {
  image_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageMsg::image_name() const {
  // @@protoc_insertion_point(field_get:ZMQMessage.ImageMsg.image_name)
  return image_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageMsg::set_image_name(const ::std::string& value) {
  
  image_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ZMQMessage.ImageMsg.image_name)
}
inline void ImageMsg::set_image_name(const char* value) {
  
  image_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ZMQMessage.ImageMsg.image_name)
}
inline void ImageMsg::set_image_name(const char* value, size_t size) {
  
  image_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ZMQMessage.ImageMsg.image_name)
}
inline ::std::string* ImageMsg::mutable_image_name() {
  
  // @@protoc_insertion_point(field_mutable:ZMQMessage.ImageMsg.image_name)
  return image_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageMsg::release_image_name() {
  // @@protoc_insertion_point(field_release:ZMQMessage.ImageMsg.image_name)
  
  return image_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageMsg::set_allocated_image_name(::std::string* image_name) {
  if (image_name != NULL) {
    
  } else {
    
  }
  image_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_name);
  // @@protoc_insertion_point(field_set_allocated:ZMQMessage.ImageMsg.image_name)
}

// -------------------------------------------------------------------

// ZMQMsg

// optional .ZMQMessage.ZMQMsg.MsgType msg_type = 1;
inline void ZMQMsg::clear_msg_type() {
  msg_type_ = 0;
}
inline ::ZMQMessage::ZMQMsg_MsgType ZMQMsg::msg_type() const {
  // @@protoc_insertion_point(field_get:ZMQMessage.ZMQMsg.msg_type)
  return static_cast< ::ZMQMessage::ZMQMsg_MsgType >(msg_type_);
}
inline void ZMQMsg::set_msg_type(::ZMQMessage::ZMQMsg_MsgType value) {
  
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:ZMQMessage.ZMQMsg.msg_type)
}

// optional .ZMQMessage.ImageMsg img_msg = 2;
inline bool ZMQMsg::has_img_msg() const {
  return !_is_default_instance_ && img_msg_ != NULL;
}
inline void ZMQMsg::clear_img_msg() {
  if (GetArenaNoVirtual() == NULL && img_msg_ != NULL) delete img_msg_;
  img_msg_ = NULL;
}
inline const ::ZMQMessage::ImageMsg& ZMQMsg::img_msg() const {
  // @@protoc_insertion_point(field_get:ZMQMessage.ZMQMsg.img_msg)
  return img_msg_ != NULL ? *img_msg_ : *default_instance_->img_msg_;
}
inline ::ZMQMessage::ImageMsg* ZMQMsg::mutable_img_msg() {
  
  if (img_msg_ == NULL) {
    img_msg_ = new ::ZMQMessage::ImageMsg;
  }
  // @@protoc_insertion_point(field_mutable:ZMQMessage.ZMQMsg.img_msg)
  return img_msg_;
}
inline ::ZMQMessage::ImageMsg* ZMQMsg::release_img_msg() {
  // @@protoc_insertion_point(field_release:ZMQMessage.ZMQMsg.img_msg)
  
  ::ZMQMessage::ImageMsg* temp = img_msg_;
  img_msg_ = NULL;
  return temp;
}
inline void ZMQMsg::set_allocated_img_msg(::ZMQMessage::ImageMsg* img_msg) {
  delete img_msg_;
  img_msg_ = img_msg;
  if (img_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZMQMessage.ZMQMsg.img_msg)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ZMQMessage

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ZMQMessage::ImageMsg_DataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ZMQMessage::ImageMsg_DataType>() {
  return ::ZMQMessage::ImageMsg_DataType_descriptor();
}
template <> struct is_proto_enum< ::ZMQMessage::ZMQMsg_MsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ZMQMessage::ZMQMsg_MsgType>() {
  return ::ZMQMessage::ZMQMsg_MsgType_descriptor();
}
template <> struct is_proto_enum< ::ZMQMessage::ImageFormat> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ZMQMessage::ImageFormat>() {
  return ::ZMQMessage::ImageFormat_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_zmq_5fmsg_2eproto__INCLUDED
