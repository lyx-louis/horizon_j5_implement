// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ImageInfo {

namespace {

const ::google::protobuf::Descriptor* image_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  image_info_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* image_info_Tasktype_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_test_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_test_2eproto() {
  protobuf_AddDesc_test_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "test.proto");
  GOOGLE_CHECK(file != NULL);
  image_info_descriptor_ = file->message_type(0);
  static const int image_info_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(image_info, image_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(image_info, task_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(image_info, image_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(image_info, image_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(image_info, image_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(image_info, model_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(image_info, image_valid_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(image_info, image_valid_width_),
  };
  image_info_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      image_info_descriptor_,
      image_info::default_instance_,
      image_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(image_info, _has_bits_[0]),
      -1,
      -1,
      sizeof(image_info),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(image_info, _internal_metadata_),
      -1);
  image_info_Tasktype_descriptor_ = image_info_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_test_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      image_info_descriptor_, &image_info::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_test_2eproto() {
  delete image_info::default_instance_;
  delete image_info_reflection_;
}

void protobuf_AddDesc_test_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_test_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntest.proto\022\tImageInfo\"\254\002\n\nimage_info\022\022"
    "\n\nimage_data\030\001 \003(\r\0221\n\ttask_type\030\002 \002(\0162\036."
    "ImageInfo.image_info.Tasktype\022\023\n\013image_w"
    "idth\030\003 \002(\005\022\024\n\014image_height\030\004 \002(\005\022\022\n\nimag"
    "e_name\030\005 \002(\t\022\022\n\nmodel_name\030\006 \001(\t\022\032\n\022imag"
    "e_valid_height\030\007 \001(\005\022\031\n\021image_valid_widt"
    "h\030\010 \001(\005\"M\n\010Tasktype\022\022\n\016classification\020\000\022"
    "\r\n\tdetection\020\001\022\020\n\014segmentation\020\002\022\014\n\010inst"
    "ance\020\003", 326);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test.proto", &protobuf_RegisterTypes);
  image_info::default_instance_ = new image_info();
  image_info::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_test_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_test_2eproto {
  StaticDescriptorInitializer_test_2eproto() {
    protobuf_AddDesc_test_2eproto();
  }
} static_descriptor_initializer_test_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* image_info_Tasktype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return image_info_Tasktype_descriptor_;
}
bool image_info_Tasktype_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const image_info_Tasktype image_info::classification;
const image_info_Tasktype image_info::detection;
const image_info_Tasktype image_info::segmentation;
const image_info_Tasktype image_info::instance;
const image_info_Tasktype image_info::Tasktype_MIN;
const image_info_Tasktype image_info::Tasktype_MAX;
const int image_info::Tasktype_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int image_info::kImageDataFieldNumber;
const int image_info::kTaskTypeFieldNumber;
const int image_info::kImageWidthFieldNumber;
const int image_info::kImageHeightFieldNumber;
const int image_info::kImageNameFieldNumber;
const int image_info::kModelNameFieldNumber;
const int image_info::kImageValidHeightFieldNumber;
const int image_info::kImageValidWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

image_info::image_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImageInfo.image_info)
}

void image_info::InitAsDefaultInstance() {
}

image_info::image_info(const image_info& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ImageInfo.image_info)
}

void image_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  task_type_ = 0;
  image_width_ = 0;
  image_height_ = 0;
  image_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_valid_height_ = 0;
  image_valid_width_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

image_info::~image_info() {
  // @@protoc_insertion_point(destructor:ImageInfo.image_info)
  SharedDtor();
}

void image_info::SharedDtor() {
  image_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void image_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* image_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return image_info_descriptor_;
}

const image_info& image_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();
  return *default_instance_;
}

image_info* image_info::default_instance_ = NULL;

image_info* image_info::New(::google::protobuf::Arena* arena) const {
  image_info* n = new image_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void image_info::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageInfo.image_info)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(image_info, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<image_info*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 254u) {
    ZR_(task_type_, image_width_);
    ZR_(image_height_, image_valid_height_);
    if (has_image_name()) {
      image_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_model_name()) {
      model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    image_valid_width_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  image_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool image_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImageInfo.image_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 image_data = 1;
      case 1: {
        if (tag == 8) {
         parse_image_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_image_data())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_image_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_image_data;
        if (input->ExpectTag(16)) goto parse_task_type;
        break;
      }

      // required .ImageInfo.image_info.Tasktype task_type = 2;
      case 2: {
        if (tag == 16) {
         parse_task_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ImageInfo::image_info_Tasktype_IsValid(value)) {
            set_task_type(static_cast< ::ImageInfo::image_info_Tasktype >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_image_width;
        break;
      }

      // required int32 image_width = 3;
      case 3: {
        if (tag == 24) {
         parse_image_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_width_)));
          set_has_image_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_image_height;
        break;
      }

      // required int32 image_height = 4;
      case 4: {
        if (tag == 32) {
         parse_image_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_height_)));
          set_has_image_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_image_name;
        break;
      }

      // required string image_name = 5;
      case 5: {
        if (tag == 42) {
         parse_image_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image_name().data(), this->image_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ImageInfo.image_info.image_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_model_name;
        break;
      }

      // optional string model_name = 6;
      case 6: {
        if (tag == 50) {
         parse_model_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model_name().data(), this->model_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ImageInfo.image_info.model_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_image_valid_height;
        break;
      }

      // optional int32 image_valid_height = 7;
      case 7: {
        if (tag == 56) {
         parse_image_valid_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_valid_height_)));
          set_has_image_valid_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_image_valid_width;
        break;
      }

      // optional int32 image_valid_width = 8;
      case 8: {
        if (tag == 64) {
         parse_image_valid_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_valid_width_)));
          set_has_image_valid_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImageInfo.image_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImageInfo.image_info)
  return false;
#undef DO_
}

void image_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImageInfo.image_info)
  // repeated uint32 image_data = 1;
  for (int i = 0; i < this->image_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->image_data(i), output);
  }

  // required .ImageInfo.image_info.Tasktype task_type = 2;
  if (has_task_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->task_type(), output);
  }

  // required int32 image_width = 3;
  if (has_image_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->image_width(), output);
  }

  // required int32 image_height = 4;
  if (has_image_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->image_height(), output);
  }

  // required string image_name = 5;
  if (has_image_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_name().data(), this->image_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ImageInfo.image_info.image_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->image_name(), output);
  }

  // optional string model_name = 6;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ImageInfo.image_info.model_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->model_name(), output);
  }

  // optional int32 image_valid_height = 7;
  if (has_image_valid_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->image_valid_height(), output);
  }

  // optional int32 image_valid_width = 8;
  if (has_image_valid_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->image_valid_width(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ImageInfo.image_info)
}

::google::protobuf::uint8* image_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ImageInfo.image_info)
  // repeated uint32 image_data = 1;
  for (int i = 0; i < this->image_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->image_data(i), target);
  }

  // required .ImageInfo.image_info.Tasktype task_type = 2;
  if (has_task_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->task_type(), target);
  }

  // required int32 image_width = 3;
  if (has_image_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->image_width(), target);
  }

  // required int32 image_height = 4;
  if (has_image_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->image_height(), target);
  }

  // required string image_name = 5;
  if (has_image_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_name().data(), this->image_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ImageInfo.image_info.image_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->image_name(), target);
  }

  // optional string model_name = 6;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ImageInfo.image_info.model_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->model_name(), target);
  }

  // optional int32 image_valid_height = 7;
  if (has_image_valid_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->image_valid_height(), target);
  }

  // optional int32 image_valid_width = 8;
  if (has_image_valid_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->image_valid_width(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageInfo.image_info)
  return target;
}

int image_info::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ImageInfo.image_info)
  int total_size = 0;

  if (has_task_type()) {
    // required .ImageInfo.image_info.Tasktype task_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->task_type());
  }

  if (has_image_width()) {
    // required int32 image_width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->image_width());
  }

  if (has_image_height()) {
    // required int32 image_height = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->image_height());
  }

  if (has_image_name()) {
    // required string image_name = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image_name());
  }

  return total_size;
}
int image_info::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ImageInfo.image_info)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001e) ^ 0x0000001e) == 0) {  // All required fields are present.
    // required .ImageInfo.image_info.Tasktype task_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->task_type());

    // required int32 image_width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->image_width());

    // required int32 image_height = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->image_height());

    // required string image_name = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[5 / 32] & 224u) {
    // optional string model_name = 6;
    if (has_model_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_name());
    }

    // optional int32 image_valid_height = 7;
    if (has_image_valid_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->image_valid_height());
    }

    // optional int32 image_valid_width = 8;
    if (has_image_valid_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->image_valid_width());
    }

  }
  // repeated uint32 image_data = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->image_data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->image_data(i));
    }
    total_size += 1 * this->image_data_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void image_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImageInfo.image_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const image_info* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const image_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImageInfo.image_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImageInfo.image_info)
    MergeFrom(*source);
  }
}

void image_info::MergeFrom(const image_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageInfo.image_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  image_data_.MergeFrom(from.image_data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_task_type()) {
      set_task_type(from.task_type());
    }
    if (from.has_image_width()) {
      set_image_width(from.image_width());
    }
    if (from.has_image_height()) {
      set_image_height(from.image_height());
    }
    if (from.has_image_name()) {
      set_has_image_name();
      image_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_name_);
    }
    if (from.has_model_name()) {
      set_has_model_name();
      model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
    }
    if (from.has_image_valid_height()) {
      set_image_valid_height(from.image_valid_height());
    }
    if (from.has_image_valid_width()) {
      set_image_valid_width(from.image_valid_width());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void image_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImageInfo.image_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void image_info::CopyFrom(const image_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageInfo.image_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool image_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  return true;
}

void image_info::Swap(image_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void image_info::InternalSwap(image_info* other) {
  image_data_.UnsafeArenaSwap(&other->image_data_);
  std::swap(task_type_, other->task_type_);
  std::swap(image_width_, other->image_width_);
  std::swap(image_height_, other->image_height_);
  image_name_.Swap(&other->image_name_);
  model_name_.Swap(&other->model_name_);
  std::swap(image_valid_height_, other->image_valid_height_);
  std::swap(image_valid_width_, other->image_valid_width_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata image_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = image_info_descriptor_;
  metadata.reflection = image_info_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// image_info

// repeated uint32 image_data = 1;
int image_info::image_data_size() const {
  return image_data_.size();
}
void image_info::clear_image_data() {
  image_data_.Clear();
}
 ::google::protobuf::uint32 image_info::image_data(int index) const {
  // @@protoc_insertion_point(field_get:ImageInfo.image_info.image_data)
  return image_data_.Get(index);
}
 void image_info::set_image_data(int index, ::google::protobuf::uint32 value) {
  image_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:ImageInfo.image_info.image_data)
}
 void image_info::add_image_data(::google::protobuf::uint32 value) {
  image_data_.Add(value);
  // @@protoc_insertion_point(field_add:ImageInfo.image_info.image_data)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
image_info::image_data() const {
  // @@protoc_insertion_point(field_list:ImageInfo.image_info.image_data)
  return image_data_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
image_info::mutable_image_data() {
  // @@protoc_insertion_point(field_mutable_list:ImageInfo.image_info.image_data)
  return &image_data_;
}

// required .ImageInfo.image_info.Tasktype task_type = 2;
bool image_info::has_task_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void image_info::set_has_task_type() {
  _has_bits_[0] |= 0x00000002u;
}
void image_info::clear_has_task_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void image_info::clear_task_type() {
  task_type_ = 0;
  clear_has_task_type();
}
 ::ImageInfo::image_info_Tasktype image_info::task_type() const {
  // @@protoc_insertion_point(field_get:ImageInfo.image_info.task_type)
  return static_cast< ::ImageInfo::image_info_Tasktype >(task_type_);
}
 void image_info::set_task_type(::ImageInfo::image_info_Tasktype value) {
  assert(::ImageInfo::image_info_Tasktype_IsValid(value));
  set_has_task_type();
  task_type_ = value;
  // @@protoc_insertion_point(field_set:ImageInfo.image_info.task_type)
}

// required int32 image_width = 3;
bool image_info::has_image_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void image_info::set_has_image_width() {
  _has_bits_[0] |= 0x00000004u;
}
void image_info::clear_has_image_width() {
  _has_bits_[0] &= ~0x00000004u;
}
void image_info::clear_image_width() {
  image_width_ = 0;
  clear_has_image_width();
}
 ::google::protobuf::int32 image_info::image_width() const {
  // @@protoc_insertion_point(field_get:ImageInfo.image_info.image_width)
  return image_width_;
}
 void image_info::set_image_width(::google::protobuf::int32 value) {
  set_has_image_width();
  image_width_ = value;
  // @@protoc_insertion_point(field_set:ImageInfo.image_info.image_width)
}

// required int32 image_height = 4;
bool image_info::has_image_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void image_info::set_has_image_height() {
  _has_bits_[0] |= 0x00000008u;
}
void image_info::clear_has_image_height() {
  _has_bits_[0] &= ~0x00000008u;
}
void image_info::clear_image_height() {
  image_height_ = 0;
  clear_has_image_height();
}
 ::google::protobuf::int32 image_info::image_height() const {
  // @@protoc_insertion_point(field_get:ImageInfo.image_info.image_height)
  return image_height_;
}
 void image_info::set_image_height(::google::protobuf::int32 value) {
  set_has_image_height();
  image_height_ = value;
  // @@protoc_insertion_point(field_set:ImageInfo.image_info.image_height)
}

// required string image_name = 5;
bool image_info::has_image_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void image_info::set_has_image_name() {
  _has_bits_[0] |= 0x00000010u;
}
void image_info::clear_has_image_name() {
  _has_bits_[0] &= ~0x00000010u;
}
void image_info::clear_image_name() {
  image_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_image_name();
}
 const ::std::string& image_info::image_name() const {
  // @@protoc_insertion_point(field_get:ImageInfo.image_info.image_name)
  return image_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void image_info::set_image_name(const ::std::string& value) {
  set_has_image_name();
  image_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageInfo.image_info.image_name)
}
 void image_info::set_image_name(const char* value) {
  set_has_image_name();
  image_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageInfo.image_info.image_name)
}
 void image_info::set_image_name(const char* value, size_t size) {
  set_has_image_name();
  image_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageInfo.image_info.image_name)
}
 ::std::string* image_info::mutable_image_name() {
  set_has_image_name();
  // @@protoc_insertion_point(field_mutable:ImageInfo.image_info.image_name)
  return image_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* image_info::release_image_name() {
  // @@protoc_insertion_point(field_release:ImageInfo.image_info.image_name)
  clear_has_image_name();
  return image_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void image_info::set_allocated_image_name(::std::string* image_name) {
  if (image_name != NULL) {
    set_has_image_name();
  } else {
    clear_has_image_name();
  }
  image_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_name);
  // @@protoc_insertion_point(field_set_allocated:ImageInfo.image_info.image_name)
}

// optional string model_name = 6;
bool image_info::has_model_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void image_info::set_has_model_name() {
  _has_bits_[0] |= 0x00000020u;
}
void image_info::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000020u;
}
void image_info::clear_model_name() {
  model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model_name();
}
 const ::std::string& image_info::model_name() const {
  // @@protoc_insertion_point(field_get:ImageInfo.image_info.model_name)
  return model_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void image_info::set_model_name(const ::std::string& value) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageInfo.image_info.model_name)
}
 void image_info::set_model_name(const char* value) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageInfo.image_info.model_name)
}
 void image_info::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageInfo.image_info.model_name)
}
 ::std::string* image_info::mutable_model_name() {
  set_has_model_name();
  // @@protoc_insertion_point(field_mutable:ImageInfo.image_info.model_name)
  return model_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* image_info::release_model_name() {
  // @@protoc_insertion_point(field_release:ImageInfo.image_info.model_name)
  clear_has_model_name();
  return model_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void image_info::set_allocated_model_name(::std::string* model_name) {
  if (model_name != NULL) {
    set_has_model_name();
  } else {
    clear_has_model_name();
  }
  model_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_name);
  // @@protoc_insertion_point(field_set_allocated:ImageInfo.image_info.model_name)
}

// optional int32 image_valid_height = 7;
bool image_info::has_image_valid_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void image_info::set_has_image_valid_height() {
  _has_bits_[0] |= 0x00000040u;
}
void image_info::clear_has_image_valid_height() {
  _has_bits_[0] &= ~0x00000040u;
}
void image_info::clear_image_valid_height() {
  image_valid_height_ = 0;
  clear_has_image_valid_height();
}
 ::google::protobuf::int32 image_info::image_valid_height() const {
  // @@protoc_insertion_point(field_get:ImageInfo.image_info.image_valid_height)
  return image_valid_height_;
}
 void image_info::set_image_valid_height(::google::protobuf::int32 value) {
  set_has_image_valid_height();
  image_valid_height_ = value;
  // @@protoc_insertion_point(field_set:ImageInfo.image_info.image_valid_height)
}

// optional int32 image_valid_width = 8;
bool image_info::has_image_valid_width() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void image_info::set_has_image_valid_width() {
  _has_bits_[0] |= 0x00000080u;
}
void image_info::clear_has_image_valid_width() {
  _has_bits_[0] &= ~0x00000080u;
}
void image_info::clear_image_valid_width() {
  image_valid_width_ = 0;
  clear_has_image_valid_width();
}
 ::google::protobuf::int32 image_info::image_valid_width() const {
  // @@protoc_insertion_point(field_get:ImageInfo.image_info.image_valid_width)
  return image_valid_width_;
}
 void image_info::set_image_valid_width(::google::protobuf::int32 value) {
  set_has_image_valid_width();
  image_valid_width_ = value;
  // @@protoc_insertion_point(field_set:ImageInfo.image_info.image_valid_width)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ImageInfo

// @@protoc_insertion_point(global_scope)
